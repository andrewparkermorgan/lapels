#! /bin/env python 
'''
Created on Oct 28, 2012

@author: Shunping Huang
'''

import os
import pysam
import argparse

from modtools.mod2 import Mod
from modtools.utils import buildChromMap, getOutChrom, log
from time import localtime,strftime

DESC = 'A FASTA generator for in silico genomes'

#modfile = "../../data/C.mod" 
#infasta = "../../data/ref.chr1_chr10.fa"
#chroms = ['1','10']
#outfasta = "out.fa"
#width = 72


def seq2fasta(fp, sample, seq, chrom, width):
    fp.write('>%s chromosome:%s:%s:1:%d:1 %s\n' 
             % (chrom, sample, chrom, len(seq), strftime("v:%y%m%d",localtime())))
    length = len(seq)
    for i in range(0, length, width):
        if (i+width)<=length:
            fp.write(seq[i:i+width])
        else:
            fp.write(seq[i:])
        fp.write('\n')
    fp.flush()

def csvChromList(s):
    chroms = set()
    for chrom in s.split(','):
        chroms.add(chrom)            
    return sorted(chroms)


if __name__ == '__main__':    
    ## Parse arguments
    p = argparse.ArgumentParser(description=DESC, 
                                formatter_class = argparse.RawTextHelpFormatter)
    group = p.add_mutually_exclusive_group()    
    group.add_argument("-q", dest='quiet', action='store_true',
                       help='quiet mode')
    group.add_argument('-v', dest='verbosity', action="store_const", const=2,
                       default=1, help='verbose mode')        
    p.add_argument('-c', metavar='chromList', dest='chroms', type=csvChromList,
                   default = set(),
                   help='a comma-separated list of chromosomes in MOD' +
                        ' (default: all)')
    p.add_argument('-s', metavar='sample', dest='sample', default=None, 
                   help='sample name (default: <mod_prefix>)')
    p.add_argument('--map1', metavar='chromMap1', dest='mapfp1', type=argparse.FileType('r'),
                   default = None,
                   help='the file of chromosome name mapping from MOD to input FASTA' +
                        ' (default: none)')
    p.add_argument('--map2', metavar='chromMap2', dest='mapfp2', type=argparse.FileType('r'),
                   default = None,
                   help='the file of chromosome name mapping from MOD to output FASTA' +
                        ' (default: none)')
    p.add_argument('-w', metavar='width', dest='width', type=int, default = 72,  
                   help='the width in output FASTA  (default: 72)')    
    p.add_argument('-o', metavar='out.fa', dest='outfasta', type=argparse.FileType('w'), 
                   default=None, help='the output FASTA file'\
                        +' (default: out.fasta)')
    
    p.add_argument('mod', metavar='in.mod', 
                   type=argparse.FileType('r'), help='an input MOD file')
                        
    p.add_argument('infasta', metavar='in.fa',
                   type=argparse.FileType('r'), help='an input (reference) FASTA file')                    
        
    args = p.parse_args()
    
    if args.sample is None:
        sample = os.path.basename(args.mod.name)
        idx = sample.index('.')
        if idx >= 0:
            sample = sample[:idx]
        sample.replace(':','_')
    else:
        sample = args.sample 
    
    if args.outfasta is None:               
        outfasta = open('out.fa', 'wb')
    else:        
        outfasta = args.outfasta
        
    chromMap1 = buildChromMap(args.mapfp1)
    chromMap2 = buildChromMap(args.mapfp2)
    
    chroms = list(args.chroms)
    width = args.width
            
    if args.quiet:
        VERBOSITY = 0
    else:            
        VERBOSITY = args.verbosity
    
    args.mod.close()
    mod = Mod(args.mod.name)
    
    args.infasta.close()                
    # Build index on fasta
    if not os.path.isfile(args.infasta.name+'.fai'):
        pysam.faidx(args.infasta.name)            
    
    fp = open(args.infasta.name+'.fai')
    inChromLengths = {}
    for line in fp:
        tmp = line.rstrip().split('\t')
        inChromLengths[tmp[0]] = int(tmp[1])
    fp.close()
#    print (inChromLengths)

    infasta = pysam.Fastafile(args.infasta.name)
    
    if VERBOSITY > 0:                            
        log("input MOD file: %s\n" % mod.fileName, 1, True)
        log("input FASTA file: %s\n" % infasta.filename, 1, True)
        log("output FASTA file: %s\n" % outfasta.name, 1, True)
                
    
    for chrom in chroms:
        if VERBOSITY > 0:
            log("loading chromosome '%s' from MOD...\n" % chrom, 1, True)            
        mod.load(chrom)
        if VERBOSITY > 0:
            log("%d line(s) found in MOD\n" % len(mod.data), 1, True)
            if len(mod.data) == 0:
                log("Warning: chromosome '%s' not found in MOD, " % chrom + 
                    "maybe incorrect name or mapping\n" 
                    , 2, True)
                    
#        posmap=mod.getPosMap(chrom, fastaChromLens[chrom])
#        print(posmap.toCSV()[:1000])
        inFastaChrom = getOutChrom(chromMap1, chrom)
        seq=mod.getSeq(infasta, chrom, chromMap1, inChromLengths)
        if VERBOSITY > 0:
            log("old: %d bp -> new: %d bp\n" % (inChromLengths[inFastaChrom], len(seq)), 
                1, True)            
        
        outFastaChrom = getOutChrom(chromMap2, chrom)        
        seq2fasta(outfasta, sample, seq, outFastaChrom, width)
        
    outfasta.close()
    if VERBOSITY > 0:
        log("All Done!\n", 1, True)